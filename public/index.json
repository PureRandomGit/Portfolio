[{"content":" I wanted an automated blind solution that wouldn\u0026rsquo;t rely on cloud services or expensive commercial products. By repurposing an IKEA roller shades and designing my own controller system, I was able to build a cheap local solution.\nHardware The smart blind consists of four main components:\n28BYJ-48 stepper motor ULN2003 stepper motor driver board ESP32 microcontroller IKEA roller shade I chose these because they were very cheap off of Amazon or Aliexpress and because the ULN2003 was supported by Esphome\u0026rsquo;s stepper component which I was planning on using to program the esp32.\n3D-Printed Case To mount and house the motor and eletronics I designed a 3d printed case in Fusion360. This was my first time cading gears so it took me a bit to get the correct gear ration that would allow the motor to have enough torque to raise the blinds without skipping. After that it was just a matter of blocking out where each component would go and build the case around them.\nWiring The wiring for the ULN2003 was rather straight forward and only needed 4 wires connected to the esp32 and then power and ground for both the driver and esp32\nSoftware To test that everything was working I wrote a quick arduino program to spin the motor in both directions for a few seconds. After confirming my wiring was correct and the code ran I started to write the Esphome code. During this process, I discovered that RoadKillUK had published a Github that was very similar to what I was trying to accomplish. I only had to modify the code slightly to work with an esp32 but it was pretty much perfect.\nUsage \u0026amp; Future Improvements I\u0026rsquo;ve been running the blind for a little over a year now and have had no issue with it so far. There are a few things that I would change if I made a second version. First, the blinds are slow, they take over a minuet to raise/lower about 3 feet. Second, the stepper motor loses its memory of the blind position if it loses power and will need to be re-homed.\n","permalink":"http://localhost:1313/posts/smart-blinds-v1/","summary":"Cheap, simple and effective smart blinds made from and old IKEA roller shades and a few electronic components.","title":"Smart Blinds"},{"content":"Hi, I\u0026rsquo;m Samuel.\nI’m a computer engineering student and developer with a focus on embedded systems, automation, and full-stack development. I enjoy designing efficient, practical solutions that bridge hardware and software — whether it\u0026rsquo;s building smart home systems, programming robots, or developing custom tools to streamline workflows.\nMy work often combines rapid prototyping, custom electronics, 3D design, and software integration across multiple platforms. I aim to build projects that are not only functional but reliable, scalable, and maintainable.\n","permalink":"http://localhost:1313/about/","summary":"\u003cp\u003eHi, I\u0026rsquo;m Samuel.\u003c/p\u003e\n\u003cp\u003eI’m a computer engineering student and developer with a focus on embedded systems, automation, and full-stack development. I enjoy designing efficient, practical solutions that bridge hardware and software — whether it\u0026rsquo;s building smart home systems, programming robots, or developing custom tools to streamline workflows.\u003c/p\u003e\n\u003cp\u003eMy work often combines rapid prototyping, custom electronics, 3D design, and software integration across multiple platforms. I aim to build projects that are not only functional but reliable, scalable, and maintainable.\u003c/p\u003e","title":"About"},{"content":" I wanted an automated blind solution that wouldn\u0026rsquo;t rely on cloud services or expensive commercial products. By repurposing an IKEA roller shades and designing my own controller system, I was able to build a cheap local solution.\nHardware The smart blind consists of four main components:\n28BYJ-48 stepper motor ULN2003 stepper motor driver board ESP32 microcontroller IKEA roller shade I chose these because they were very cheap off of Amazon or Aliexpress and because the ULN2003 was supported by Esphome\u0026rsquo;s stepper component which I was planning on using to program the esp32.\n3D-Printed Case To mount and house the motor and eletronics I designed a 3d printed case in Fusion360. This was my first time cading gears so it took me a bit to get the correct gear ration that would allow the motor to have enough torque to raise the blinds without skipping. After that it was just a matter of blocking out where each component would go and build the case around them.\nWiring The wiring for the ULN2003 was rather straight forward and only needed 4 wires connected to the esp32 and then power and ground for both the driver and esp32\nSoftware To test that everything was working I wrote a quick arduino program to spin the motor in both directions for a few seconds. After confirming my wiring was correct and the code ran I started to write the Esphome code. During this process, I discovered that RoadKillUK had published a Github that was very similar to what I was trying to accomplish. I only had to modify the code slightly to work with an esp32 but it was pretty much perfect.\nUsage \u0026amp; Future Improvements I\u0026rsquo;ve been running the blind for a little over a year now and have had no issue with it so far. There are a few things that I would change if I made a second version. First, the blinds are slow, they take over a minuet to raise/lower about 3 feet. Second, the stepper motor loses its memory of the blind position if it loses power and will need to be re-homed.\n","permalink":"http://localhost:1313/posts/smart-blinds-v1/","summary":"Cheap, simple and effective smart blinds made from and old IKEA roller shades and a few electronic components.","title":"Smart Blinds"},{"content":"I’m a computer engineering student and developer with a focus on embedded systems, automation, and full-stack development. I enjoy designing efficient, practical solutions that bridge hardware and software — whether it\u0026rsquo;s building smart home systems, programming robots, or developing custom tools to streamline workflows.\nMy work often combines rapid prototyping, custom electronics, 3D design, and software integration across multiple platforms. I aim to build projects that are not only functional but reliable, scalable, and maintainable.\n","permalink":"http://localhost:1313/about/","summary":"\u003cp\u003eI’m a computer engineering student and developer with a focus on embedded systems, automation, and full-stack development. I enjoy designing efficient, practical solutions that bridge hardware and software — whether it\u0026rsquo;s building smart home systems, programming robots, or developing custom tools to streamline workflows.\u003c/p\u003e\n\u003cp\u003eMy work often combines rapid prototyping, custom electronics, 3D design, and software integration across multiple platforms. I aim to build projects that are not only functional but reliable, scalable, and maintainable.\u003c/p\u003e","title":"About"},{"content":" I wanted an automated blind solution that wouldn\u0026rsquo;t rely on cloud services or expensive commercial products. By repurposing an IKEA roller shades and designing my own controller system, I was able to build a cheap local solution.\nHardware The smart blind consists of four main components:\n28BYJ-48 stepper motor ULN2003 stepper motor driver board ESP32 microcontroller IKEA roller shade I chose these because they were very cheap off of Amazon or Aliexpress and because the ULN2003 was supported by Esphome\u0026rsquo;s stepper component which I was planning on using to program the esp32.\n3D-Printed Case To mount and house the motor and eletronics I designed a 3d printed case in Fusion360. This was my first time cading gears so it took me a bit to get the correct gear ration that would allow the motor to have enough torque to raise the blinds without skipping. After that it was just a matter of blocking out where each component would go and build the case around them.\nWiring The wiring for the ULN2003 was rather straight forward and only needed 4 wires connected to the esp32 and then power and ground for both the driver and esp32\nSoftware To test that everything was working I wrote a quick arduino program to spin the motor in both directions for a few seconds. After confirming my wiring was correct and the code ran I started to write the Esphome code. During this process, I discovered that RoadKillUK had published a Github that was very similar to what I was trying to accomplish. I only had to modify the code slightly to work with an esp32 but it was pretty much perfect.\nUsage \u0026amp; Future Improvements I\u0026rsquo;ve been running the blind for a little over a year now and have had no issue with it so far. There are a few things that I would change if I made a second version. First, the blinds are slow, they take over a minuet to raise/lower about 3 feet. Second, the stepper motor loses its memory of the blind position if it loses power and will need to be re-homed.\n","permalink":"http://localhost:1313/posts/smart-blinds-v1/","summary":"Cheap, simple and effective smart blinds made from and old IKEA roller shades and a few electronic components.","title":"Smart Blinds"},{"content":"I’m a computer engineering student and developer with a focus on embedded systems, automation, and full-stack development. I enjoy designing efficient, practical solutions that bridge hardware and software — whether it\u0026rsquo;s building smart home systems, programming robots, or developing custom tools to streamline workflows.\\\nMy work often combines rapid prototyping, custom electronics, 3D design, and software integration across multiple platforms. I aim to build projects that are not only functional but reliable, scalable, and maintainable.\n","permalink":"http://localhost:1313/about/","summary":"\u003cp\u003eI’m a computer engineering student and developer with a focus on embedded systems, automation, and full-stack development. I enjoy designing efficient, practical solutions that bridge hardware and software — whether it\u0026rsquo;s building smart home systems, programming robots, or developing custom tools to streamline workflows.\\\u003c/p\u003e\n\u003cp\u003eMy work often combines rapid prototyping, custom electronics, 3D design, and software integration across multiple platforms. I aim to build projects that are not only functional but reliable, scalable, and maintainable.\u003c/p\u003e","title":"About"},{"content":" I wanted an automated blind solution that wouldn\u0026rsquo;t rely on cloud services or expensive commercial products. By repurposing an IKEA roller shades and designing my own controller system, I was able to build a cheap local solution.\nHardware The smart blind consists of four main components:\n28BYJ-48 stepper motor ULN2003 stepper motor driver board ESP32 microcontroller IKEA roller shade I chose these because they were very cheap off of Amazon or Aliexpress and because the ULN2003 was supported by Esphome\u0026rsquo;s stepper component which I was planning on using to program the esp32.\n3D-Printed Case To mount and house the motor and eletronics I designed a 3d printed case in Fusion360. This was my first time cading gears so it took me a bit to get the correct gear ration that would allow the motor to have enough torque to raise the blinds without skipping. After that it was just a matter of blocking out where each component would go and build the case around them.\nWiring The wiring for the ULN2003 was rather straight forward and only needed 4 wires connected to the esp32 and then power and ground for both the driver and esp32\nSoftware To test that everything was working I wrote a quick arduino program to spin the motor in both directions for a few seconds. After confirming my wiring was correct and the code ran I started to write the Esphome code. During this process, I discovered that RoadKillUK had published a Github that was very similar to what I was trying to accomplish. I only had to modify the code slightly to work with an esp32 but it was pretty much perfect.\nUsage \u0026amp; Future Improvements I\u0026rsquo;ve been running the blind for a little over a year now and have had no issue with it so far. There are a few things that I would change if I made a second version. First, the blinds are slow, they take over a minuet to raise/lower about 3 feet. Second, the stepper motor loses its memory of the blind position if it loses power and will need to be re-homed.\n","permalink":"http://localhost:1313/posts/smart-blinds-v1/","summary":"Cheap, simple and effective smart blinds made from and old IKEA roller shades and a few electronic components.","title":"Smart Blinds"},{"content":"I’m a computer engineering student and developer with a focus on embedded systems, automation, and full-stack development. I enjoy designing efficient, practical solutions that bridge hardware and software — whether it\u0026rsquo;s building smart home systems, programming robots, or developing custom tools to streamline workflows.\nMy work often combines rapid prototyping, custom electronics, 3D design, and software integration across multiple platforms. I aim to build projects that are not only functional but reliable, scalable, and maintainable.\n","permalink":"http://localhost:1313/about/","summary":"\u003cp\u003eI’m a computer engineering student and developer with a focus on embedded systems, automation, and full-stack development. I enjoy designing efficient, practical solutions that bridge hardware and software — whether it\u0026rsquo;s building smart home systems, programming robots, or developing custom tools to streamline workflows.\u003c/p\u003e\n\u003cp\u003eMy work often combines rapid prototyping, custom electronics, 3D design, and software integration across multiple platforms. I aim to build projects that are not only functional but reliable, scalable, and maintainable.\u003c/p\u003e","title":"About"},{"content":" I wanted an automated blind solution that wouldn\u0026rsquo;t rely on cloud services or expensive commercial products. By repurposing an IKEA roller shades and designing my own controller system, I was able to build a cheap local solution.\nHardware The smart blind consists of four main components:\n28BYJ-48 stepper motor ULN2003 stepper motor driver board ESP32 microcontroller IKEA roller shade I chose these because they were very cheap off of Amazon or Aliexpress and because the ULN2003 was supported by Esphome\u0026rsquo;s stepper component which I was planning on using to program the esp32.\n3D-Printed Case To mount and house the motor and eletronics I designed a 3d printed case in Fusion360. This was my first time cading gears so it took me a bit to get the correct gear ration that would allow the motor to have enough torque to raise the blinds without skipping. After that it was just a matter of blocking out where each component would go and build the case around them.\nWiring The wiring for the ULN2003 was rather straight forward and only needed 4 wires connected to the esp32 and then power and ground for both the driver and esp32\nSoftware To test that everything was working I wrote a quick arduino program to spin the motor in both directions for a few seconds. After confirming my wiring was correct and the code ran I started to write the Esphome code. During this process, I discovered that RoadKillUK had published a Github that was very similar to what I was trying to accomplish. I only had to modify the code slightly to work with an esp32 but it was pretty much perfect.\nUsage \u0026amp; Future Improvements I\u0026rsquo;ve been running the blind for a little over a year now and have had no issue with it so far. There are a few things that I would change if I made a second version. First, the blinds are slow, they take over a minuet to raise/lower about 3 feet. Second, the stepper motor loses its memory of the blind position if it loses power and will need to be re-homed.\n","permalink":"http://localhost:1313/posts/smart-blinds-v1/","summary":"Cheap, simple and effective smart blinds made from and old IKEA roller shades and a few electronic components.","title":"Smart Blinds"},{"content":"I’m a computer engineering student and developer with a focus on embedded systems, automation, and full-stack development. I enjoy designing efficient, practical solutions that bridge hardware and software — whether it\u0026rsquo;s building smart home systems, programming robots, or developing custom tools to streamline workflows.\nMy work often combines rapid prototyping, custom electronics, 3D design, and software integration across multiple platforms. I aim to build projects that are not only functional but reliable, scalable, and maintainable.\n","permalink":"http://localhost:1313/about/","summary":"\u003cp\u003eI’m a computer engineering student and developer with a focus on embedded systems, automation, and full-stack development. I enjoy designing efficient, practical solutions that bridge hardware and software — whether it\u0026rsquo;s building smart home systems, programming robots, or developing custom tools to streamline workflows.\u003c/p\u003e\n\u003cp\u003eMy work often combines rapid prototyping, custom electronics, 3D design, and software integration across multiple platforms. I aim to build projects that are not only functional but reliable, scalable, and maintainable.\u003c/p\u003e","title":"About"},{"content":" I wanted an automated blind solution that wouldn\u0026rsquo;t rely on cloud services or expensive commercial products. By repurposing an IKEA roller shades and designing my own controller system, I was able to build a cheap local solution.\nHardware The smart blind consists of four main components:\n28BYJ-48 stepper motor ULN2003 stepper motor driver board ESP32 microcontroller IKEA roller shade I chose these because they were very cheap off of Amazon or Aliexpress and because the ULN2003 was supported by Esphome\u0026rsquo;s stepper component which I was planning on using to program the esp32.\n3D-Printed Case To mount and house the motor and eletronics I designed a 3d printed case in Fusion360. This was my first time cading gears so it took me a bit to get the correct gear ration that would allow the motor to have enough torque to raise the blinds without skipping. After that it was just a matter of blocking out where each component would go and build the case around them.\nWiring The wiring for the ULN2003 was rather straight forward and only needed 4 wires connected to the esp32 and then power and ground for both the driver and esp32\nSoftware To test that everything was working I wrote a quick arduino program to spin the motor in both directions for a few seconds. After confirming my wiring was correct and the code ran I started to write the Esphome code. During this process, I discovered that RoadKillUK had published a Github that was very similar to what I was trying to accomplish. I only had to modify the code slightly to work with an esp32 but it was pretty much perfect.\nUsage \u0026amp; Future Improvements I\u0026rsquo;ve been running the blind for a little over a year now and have had no issue with it so far. There are a few things that I would change if I made a second version. First, the blinds are slow, they take over a minuet to raise/lower about 3 feet. Second, the stepper motor loses its memory of the blind position if it loses power and will need to be re-homed.\n","permalink":"http://localhost:1313/posts/smart-blinds-v1/","summary":"Cheap, simple and effective smart blinds made from and old IKEA roller shades and a few electronic components.","title":"Smart Blinds"},{"content":"I’m a computer engineering student and developer with a focus on embedded systems, automation, and full-stack development. I enjoy designing efficient, practical solutions that bridge hardware and software — whether it\u0026rsquo;s building smart home systems, programming robots, or developing custom tools to streamline workflows.\nMy work often combines rapid prototyping, custom electronics, 3D design, and software integration across multiple platforms. I aim to build projects that are not only functional but reliable, scalable, and maintainable.\n","permalink":"http://localhost:1313/about/","summary":"\u003cp\u003eI’m a computer engineering student and developer with a focus on embedded systems, automation, and full-stack development. I enjoy designing efficient, practical solutions that bridge hardware and software — whether it\u0026rsquo;s building smart home systems, programming robots, or developing custom tools to streamline workflows.\u003c/p\u003e\n\u003cp\u003eMy work often combines rapid prototyping, custom electronics, 3D design, and software integration across multiple platforms. I aim to build projects that are not only functional but reliable, scalable, and maintainable.\u003c/p\u003e","title":"About"}]